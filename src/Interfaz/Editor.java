/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Analizadores.sym;
import Arbol.AST;
import com.mxrck.autocompleter.TextAutoCompleter;
import Arbol.instrucciones.Contexto;
import Arbol.instrucciones.Contexto.TipoInstruccion;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.JViewport;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Element;
import javax.swing.text.Highlighter;

/**
 *
 * @author alexa
 */
public class Editor extends javax.swing.JFrame {
File Archivo;
public static LinkedList<CError> lista_errores=new LinkedList<>();
public static LinkedList<TipoInstruccion> lista_ciclos=new LinkedList<>();
private LinkedList<File> archivos=new LinkedList<>();
public static int entrada=0;
private int tabs=2;
    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
          ObtenerCursor(comando);   
         AutoCompletar(comando);
       
    }
    private void AutoCompletar(JTextPane jtext){
      
         String[] palabras={"print","println","int","double","String","char","import","for","switch","while","do","boolean","Graficar_dot","Graficar_entornos","if","else"
                            ,"case","default","continue","break"};
                  
//       TextAutoCompleter texto=new TextAutoCompleter(jtext, palabras);
//         List<String> items = new ArrayList<>();
//         items.addAll(Arrays.asList(palabras));
//         AutoCompleteDecorator.decorate(jtext,items,false);
    
       
    }
            
    private void ObtenerCursor(JTextPane a){
        a.addCaretListener((CaretEvent e) -> {
            JTextPane editArea = (JTextPane)e.getSource();
            
            
//            int linea = 1;
//            int columna = 1;
//            
//            try {
//                int caretpos = editArea.getCaretPosition();
//                linea= editArea.getLineOfOffset(caretpos);
//                columna = caretpos - editArea.getLineStartOffset(linea);
//                
//                // Ya que las líneas las cuenta desde la 0
//                linea += 1;
//                columna++;
//            } catch(Exception ex) { }
            
            int pos=editArea.getCaretPosition();
            Element map=editArea.getDocument().getDefaultRootElement();
            int linea=map.getElementIndex(pos);
            Element lineElement=map.getElement(linea);
            int columna=pos-lineElement.getStartOffset();
            linea++;
            columna++;
            // Actualizamos el estado
            cursor.setText("Linea: "+linea+" | Columna: "+columna);
        });
    }
         public void Colorear(){
             JTextPane textpane=getTextArea();
             textpane.getDocument();
         }
                 
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        pestañas = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        comando = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        cursor = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pestañas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pestañasComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(comando);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
        );

        pestañas.addTab("tab1", jPanel1);

        consola.setEditable(false);
        consola.setBackground(new java.awt.Color(0, 0, 51));
        consola.setForeground(new java.awt.Color(0, 255, 255));
        consola.setText("Output:");
        jScrollPane2.setViewportView(consola);

        cursor.setBackground(new java.awt.Color(153, 204, 255));
        cursor.setForeground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("Archivos");

        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Guardar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar Como");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Crear");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reportes");

        jMenuItem5.setText("Reporte de Errores");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Reporte AST");
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Ejecutar");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        jMenu3.setText("Salir");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pestañas)
            .addComponent(jScrollPane2)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cursor, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pestañas, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cursor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
         fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto *.NM", "NM"));
        int seleccion = fileChooser.showOpenDialog(this);
//        fileChooser.setDialogTitle("El exito es de quien persevera");
        if (seleccion == JFileChooser.APPROVE_OPTION){
            try{
                String aux="";
                String texto = "";
                File fichero = fileChooser.getSelectedFile(); 
                archivos.add(fichero);
//                Archivo=fichero;
                String ruta=fileChooser.getSelectedFile().getAbsolutePath();
                if(ruta.endsWith(".NM"))
                {     
                   FileReader archivos=new FileReader(fichero);
                   BufferedReader lee=new BufferedReader(archivos);
                   while((aux=lee.readLine())!=null)
                   {
                      texto+= aux+ "\n";
                   }
                    lee.close();
                    JTextPane comando1=new JTextPane();
                    
               
                    JScrollPane er=new JScrollPane(comando1);               
                     comando1.setText(texto);                 
                    pestañas.addTab(fichero.getName(), er);
                    
//                    comando1.setPreferredSize(new Dimension(630, 250));
                    ObtenerCursor(comando1);
                   AutoCompletar(comando1);
                
                }    

            }
            catch(IOException ex)
            {
              JOptionPane.showMessageDialog(null,ex+"" +
                    "\nNo se ha encontrado el archivo",
                          "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void pestañasComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pestañasComponentShown
    // TODO add your handling code here:
//    for (Component component : pestañas.getComponents()) {
//        if (evt.getComponent().getName().equals(component.getName())) {
//            
//        }
//    }
    }//GEN-LAST:event_pestañasComponentShown

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
       String texto="";
      JTextPane text=getTextArea();
       if(text!=null){
           texto=text.getText();
        Analizar(texto);
       }
   
       
   
   
        
    
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
         JTextPane comando1=new JTextPane();
                    
               
                    JScrollPane er=new JScrollPane(comando1);               
                     comando1.setText("");                 
                    pestañas.addTab("Tab"+tabs,er);
                    tabs++;
//                    comando1.setPreferredSize(new Dimension(630, 250));
                    ObtenerCursor(comando1);
                    AutoCompletar(comando1);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
         try{
             File archivo=null;
            for(File file:archivos){
                int index=pestañas.getSelectedIndex();
               String pane=pestañas.getTitleAt(index);
                  
                    
                       String nombreFile=file.getName();
                       if(pane.equals(nombreFile)){
//                             try {
            
            
               archivo=file;
            

            // Si el archivo no existe es creado
//            if (!file.exists()) {
//                file.createNewFile();
//            }
//
//            FileWriter fw = new FileWriter(file);
//            BufferedWriter bw = new BufferedWriter(fw);
//            bw.write(getTextArea().getText());
//            bw.close();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//                           break;
//                       }
                       }
            }
                       
               
            
    if(archivo!=null){
        String documento=getTextArea().getText();
        String mensaje=GuardarArchivo(archivo, documento);
        JOptionPane.showMessageDialog(null, mensaje);
        
     }
     }catch(Exception e){
         JOptionPane.showMessageDialog(null, "El archivo no existe.");
    }
                                     

    
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
       JFileChooser seleccionar=new JFileChooser();
        if(seleccionar.showDialog(null, "Guardar")==JFileChooser.APPROVE_OPTION){
            File archivo=null;
            for(File file:archivos){
               for(Component pane:pestañas.getComponents()){
                   if(pane instanceof JScrollPane){
                       if(((JScrollPane)pane).getName().equals(file.getName())){
                           archivo=file;
                           break;
                       }
                   }
                       
               }
            }
            
                     archivo=seleccionar.getSelectedFile();
                     if(archivo.getName().endsWith(".NM")|| archivo.getName().endsWith(".txt")){
                         String documento=getTextArea().getText();
                         String mensaje=GuardarArchivo(archivo,documento);
                         if(mensaje!=null){
                             JOptionPane.showMessageDialog(null, mensaje);
                         }
                         else{
                             JOptionPane.showMessageDialog(null, "Archivo no compatible");
                         }
                     }
                     else{
                         JOptionPane.showMessageDialog(null, "Guardar Documento de Texto");
                     }
                 }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        String datos="";
        String contenido="<!DOCTYPE HTML5>\n" +
"<html>\n" +
"	<head>\n" +
"		<title>Lista de Errores</title>\n" +
"		<meta charset=\"utf-8\""+
"	</head>\n" +
"	<body><table border=\"1\"><caption>Listado de Errores<caption><tr>"
                + "<th>No</th>"
                + "<th>Tipo</th>"
                + "<th>Descripción</th>"
                + "<th>Fila</th>"
                + "<th>Columna</th>"
                + "</tr>";
        for (int i = 0; i <lista_errores.size(); i++) {
            CError error=lista_errores.get(i);
            int num=i+1;
            datos+="<tr><td>"+num+"</td>"
                + "<td>"+error.tipo+"</td>"
                + "<td>"+error.error+"</td>"
                + "<td>"+error.linea+"</td>"
                + "<td>"+error.columna+"</td>"
                + "</tr>";
        }
        contenido+=datos+"</table>\n" +
"	</body>\n" +
"</html>";
          try {

            File file = new File ("Errores.html");
            
         if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(contenido);
            bw.close();
            Desktop.getDesktop().open(file);
     }catch (IOException ex) {

            System.out.println(ex);

     }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private JTextPane getTextArea(){
   
       int index = pestañas.getSelectedIndex();
Component c = pestañas.getComponentAt( index );
if(c instanceof JScrollPane){
   JScrollPane panel= (JScrollPane) c;
 
    Component[] compo=panel.getComponents();
//    boolean encontrado=false;
    
  for(Component componente:compo){
      if(componente instanceof JViewport){
          JViewport view=(JViewport) componente;
         Component[] comp1= view.getComponents();
         for(Component com1:comp1){
             if(com1 instanceof JTextPane){
                 return ((JTextPane) com1);
//                 encontrado=true;
//                         
//                 break;
             }
         }
         
      }
      
  }
  
  }else{
          return comando;
          }
     return null;
}
    public void Analizar(String cmd){
       lista_errores.clear();
      Analizadores.parser sintactico;
      Analizadores.Scanner scanner;
      
    AST arbol;
     try{
         
        scanner=new Analizadores.Scanner(new BufferedReader(new StringReader(cmd)));
        scanner.pin.insertar(cmd);
        getTextArea().setText("");
        getTextArea().setDocument(scanner.pin.caja2.getDocument());
        sintactico=new Analizadores.parser(scanner);
        
        sintactico.parse();
        arbol=sintactico.AST;
        if(arbol!=null){
            arbol.Ejecutar();
            
        }else{
            System.out.println("-------------------------------------Existe un error en el analisis");
            
        }
        
    }catch(IOException e){
        System.out.println(e);
    } catch (Exception ex) {
        Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
    }
     if(!lista_errores.isEmpty()){
         JOptionPane.showMessageDialog(null, "Existen errores. Revise el reporte de errores.");
     }
}
     private String GuardarArchivo(File archivo, String documento){
        String mensaje=null;
        try{
            FileOutputStream salida = new FileOutputStream(archivo);
            byte[] bxtear=documento.getBytes();
            salida.write(bxtear);
            mensaje="Archivo Guardado";
            
        }catch(IOException e){
            
        }
        return mensaje;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane comando;
    public static javax.swing.JTextPane consola;
    private javax.swing.JLabel cursor;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane pestañas;
    // End of variables declaration//GEN-END:variables

}

